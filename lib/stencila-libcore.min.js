!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("lodash"),require("@stdlib/stdlib"),require("jstat")):"function"==typeof define&&define.amd?define(["exports","lodash","@stdlib/stdlib","jstat"],n):n(e.stencilaLibcore={},e._,e.stdlib,e.jStat)}(this,function(exports,lodash,stdlib,jStat){"use strict";function assert(e,n){if(!e)throw new Error(n);return!0}function clone(e){return lodash.cloneDeep(e)}function is_string(e){return stdlib.assert.isString(e)}function is_array(e,n="any"){assert(is_string(n),"parameter `type` must be a string");const t=stdlib.assert;switch(n){case"any":return t.isArray(e);case"boolean":return t.isBooleanArray(e);case"integer":return t.isIntegerArray(e);case"number":return t.isNumberArray(e);case"string":return t.isStringArray(e);case"object":return t.isObjectArray(e);default:throw new Error(`Unknown type: ${n}`)}}function append(e,n){assert(is_array(e),"parameter `value` must be an array");let t=clone(e);return is_array(n)?t.push(...n):t.push(n),t}function is_table(e){return"object"==typeof e&&"table"===e.type}function array(e){return is_array(e)?e:is_table(e)?_array_table(e):[e]}function _array_table(e){let n=Object.keys(e.data),t=[];for(var a=0;a<e.rows;a++){let r={};for(let t of n)r[t]=e.data[t][a];t.push(r)}return t}function is_object(e){return stdlib.assert.isObject(e)}function table(e){if(is_table(e))return e;if(is_array(e,"object"))return _table_array_object(e);if(is_object(e))return _table_object(e);throw new Error("parameter `value` must be an array of objects or an object of arrays")}function _table_array_object(e){let n={},t=e.length,a=Object.keys(e[0]),r=a.length;for(let e of a)n[e]=[];for(let t of e)for(let e of a)n[e].push(t[e]);return{type:"table",data:n,columns:r,rows:t}}function _table_object(e){let n=Object.keys(e),t=n.length,a=null;for(let t of n){let r=e[t];assert(is_array(r),`object property '${t}' is not an array`),null===a?a=r.length:assert(r.length===a,`object property '${t}' has length '${r.length}' which is different to length '${a}' of first property '${n[0]}'`)}return{type:"table",data:e,columns:t,rows:a}}function extend(e,n){if(is_array(e))return _extend_array(e,n);if(is_table(e))return _extend_table(e,n);if(is_object(e))return _extend_object(e,n);throw new Error("parameter `value` must be an array, an object or a table")}function _extend_array(e,n){return assert(is_array(n),"parameter `extensions` must be an array"),e.concat(n)}function _extend_object(e,n){assert(is_object(n),"parameter `extensions` must be an object");let t=clone(e);return Object.keys(n).forEach(function(e){let a=n[e],r=new Function("object",`with(object) { return ${a} }`);t[e]=r(t)}),t}function _extend_table(e,n){assert(is_object(n),"parameter `extensions` must be an object");let t=array(e);return Object.keys(n).forEach(function(e){let a=n[e],r=new Function("object",`with(object) { return ${a} }`);t.forEach(function(n){n[e]=r(n)})}),table(t)}function is_number(e){return stdlib.assert.isNumber(e)}function type(e){let n=typeof e;if(null===e)return"null";if("boolean"===n)return"boolean";if("number"===n){let n=!1;return(n=e.isInteger?e.isInteger():e%1==0)?"integer":"number"}return"string"===n?"string":"object"===n?e.constructor===Array?"array":e.type?e.type:"object":"unknown"}function add(e,n){if(is_number(e)&&is_number(n))return e+n;if(is_string(e)&&is_string(n))return e+n;if(is_array(e))return append(e,n);if(is_object(e)&&is_object(n))return extend(e,n);if(is_table(e)&&is_table(n))return append(e,n);throw new Error(`cannot add a "${type(e)}" and a "${type(n)}"`)}function length(e){return is_array(e)?e.length:is_table(e)?e.rows:is_object(e)?Object.keys(e).length:1}function aggregate(e,n,t){if(is_array(e))return _aggregate_array(e,n,t);if(is_table(e))return _aggregate_table(e,n,t);throw new Error("parameter `value` must be an array or a table")}function _aggregate_array(value,by,summaries){assert(is_array(by),"parameter `by` must be an array"),assert(length(by)===length(value),"parameter `by` must be the same length as `value` array"),assert(is_object(summaries),"parameter `summaries` must be an object");let groups={};value.forEach(function(e,n){const t=by[n];groups[t]?groups[t].push(e):groups[t]=[e]});let aggregated={group:Object.keys(groups)};return Object.keys(summaries).forEach(function(summary){let summariser=function(values){return eval(summaries[summary])};aggregated[summary]=Object.keys(groups).map(e=>summariser(groups[e]))}),table(aggregated)}function _aggregate_table(value,by,summaries){assert(is_object(summaries),"parameter `summaries` must be an object"),assert(is_string(by)||is_array(by,"string"),"parameter `by` must be a string, or an array of strings"),by=array(by);let groups={};for(let e=0;e<value.rows;e++){let n=[];by.forEach(function(t){let a=value.data[t];if(void 0===a)throw new Error(`table does not have column '${t}'`);n.push(a[e])});let t=n.map(e=>e.toString()).join("_@_@_");if(groups[t])for(let n of Object.keys(value.data))groups[t][n].push(value.data[n][e]);else{groups[t]={};for(let n of Object.keys(value.data))groups[t][n]=[value.data[n][e]]}}let aggregated={};return by.forEach(function(e){aggregated[e]=[]}),Object.keys(summaries).forEach(function(e){aggregated[e]=[]}),Object.keys(groups).forEach(function(key){let group=groups[key];by.forEach(function(e){aggregated[e].push(group[e][0])}),Object.keys(summaries).forEach(function(summary){let summariser=function(group){return eval(summaries[summary])};aggregated[summary].push(summariser(group))})}),table(aggregated)}function is_boolean(e){return stdlib.assert.isBoolean(e)}function and(e,n){return assert(is_boolean(e),"parameter `value` must be a boolean"),assert(is_boolean(n),"parameter `other` must be a boolean"),e&&n}function between(e,n,t){return stdlib.assert.isBetween(e,n,t)}function camel_case(e){return assert(is_string(e),"parameter `value` must be a string"),lodash.camelCase(e)}function close(e,n,t){return stdlib.assert.isBetween(e,n-t,n+t,"closed","closed")}function divide(e,n){return assert(is_number(e),"parameter `value` must be a number"),assert(is_number(n),"parameter `other` must be a number"),e/n}function equal(e,n){return type(e)===type(n)&&lodash.isEqual(e,n)}function filter(e,n){if(is_array(e))return _filter_array(e,n);if(is_table(e))return _filter_table(e,n);if(is_object(e))return _filter_object(e,n);throw new Error("parameter `value` must be an array, an object, or a table")}function _filter_array(e,n){let t=new Function("index","value",`return ${n}`),a=[];return e.forEach((e,n)=>{t(n+1,e)&&a.push(e)}),a}function _filter_object(e,n){let t=new Function("name","value",`return ${n}`),a={};return Object.keys(e).forEach(n=>{t(n,e[n])&&(a[n]=e[n])}),a}function _filter_table(e,n){let t=new Function("row","object",`with(object) { return ${n} }`),a=[];if(array(e).forEach((e,n)=>{t(n+1,e)&&a.push(e)}),a.length)return table(a);{const n={};for(let t of Object.keys(e.data))n[t]=[];return table(n)}}function greater_or_equal(e,n){return e>=n}function greater(e,n){return e>n}function is_integer(e){return stdlib.assert.isInteger(e)}function kebab_case(e){return assert(is_string(e),"parameter `value` must be a string"),lodash.kebabCase(e)}function less_or_equal(e,n){return e<=n}function less(e,n){return e<n}function lower_case(e){return assert(is_string(e),"parameter `value` must be a string"),lodash.lowerCase(e)}function _wrap_array_number(e,n){return assert(is_array(n,"number"),"parameter `value` must be an array of numbers"),e(n)}function max(e){return _wrap_array_number(jStat.max,e)}function _reduce(e,n,t,...a){for(let r of a)if(t(r))e=n(e,r);else if(is_table(r))e=_reduce(e,n,t,...Object.values(r.data));else if(is_array(r))e=_reduce(e,n,t,...r);else{if(!is_object(r))throw new Error(`Unhandled argument type "${type(r)}"`);e=_reduce(e,n,t,...Object.values(r))}return e}function mean(...e){let n=_reduce({sum:0,n:0},(e,n)=>(e.sum+=n,e.n+=1,e),is_number,...e);return n.sum/n.n}function min(e){return _wrap_array_number(jStat.min,e)}function multiply(e,n){return assert(is_number(e),"parameter `value` must be a number"),assert(is_number(n),"parameter `other` must be a number"),e*n}function negative(e){return assert(is_number(e),"parameter `value` must be a number"),-e}function not_equal(e,n){return!equal(e,n)}function not(e){return assert(is_boolean(e),"parameter `value` must be a boolean"),!e}function or(e,n){return assert(is_boolean(e),"parameter `value` must be a boolean"),assert(is_boolean(n),"parameter `other` must be a boolean"),e||n}function sequence(e,n,t=1){return assert(is_number(e),"parameter `begin` must be a number"),assert(is_number(n),"parameter `end` must be a number"),assert(is_number(t),"parameter `step` must be a number"),lodash.range(e,n+t,t)}function title_case(e){return assert(is_string(e),"parameter `value` must be a string"),lodash.startCase(e)}function plot(e,n,...t){if(is_table(e))return _plot_table(e,n,...t);if(is_array(e))return is_array(n)?_plot_array_array(e,n,...t):_plot_array(e,n,...t);throw new Error("Must be called with a table as the first argument or two arrays as the first two arguments")}function _plot_array(e,...n){return _plot_table(table({x:sequence(1,length(e)),y:e}),...n)}function _plot_array_array(e,n,...t){return _plot_table(table({x:e,y:n}),...t)}function _plot_table(e,n,t,a={}){const r=Object.keys(e.data);n||(n=r.indexOf("x")>-1?"x":r[0]),t||(t=r.indexOf("y")>-1?"y":r[1]);let s={type:"scatter",mode:"markers",x:e.data[n],y:e.data[t],marker:{opacity:.5,size:10,sizemode:"area"}},o=a;o.xaxis=o.xaxis||{},o.xaxis.title=o.xaxis.title||title_case(n),o.yaxis=o.yaxis||{},o.yaxis.title=o.yaxis.title||title_case(t);const u={linecolor:"black",linewidth:1,mirror:!0,ticks:"outside",showspikes:!1};return lodash.merge(o.xaxis,u),lodash.merge(o.yaxis,u),o.margin={l:50,r:50,t:40,b:50},{type:"plotly",traces:[s],layout:o}}function plotly(e,n){is_array(e)||(e=[e]),(n=n||{}).xaxis=n.xaxis||{},n.yaxis=n.yaxis||{};const t={linecolor:"black",linewidth:1,mirror:!0,ticks:"outside",showspikes:!1};return lodash.merge(n.xaxis,t),lodash.merge(n.yaxis,t),n.margin={l:50,r:50,t:40,b:50},{type:"plotly",traces:e,layout:n}}function positive(e){return assert(is_number(e),"parameter `value` must be a number"),e}function pow(e,n){return assert(is_number(e),"parameter `value` must be a number"),assert(is_number(n),"parameter `exponent` must be a number"),Math.pow(e,n)}function prepend(e,n){assert(is_array(e),"parameter `value` must be an array");let t=clone(e);return is_array(n)?t.unshift(...n):t.unshift(n),t}function remainder(e,n){return assert(is_number(e),"parameter `value` must be a number"),assert(is_number(n),"parameter `divisor` must be a number"),e%n}function select(e,n){if(is_array(e))return _select_array(e,n);if(is_table(e))return _select_table(e,n);if(is_object(e))return _select_object(e,n);throw new Error("parameter `value` must be an array, an object, or a table")}function _select_array(e,n){if(is_integer(n)){if(n<1)throw new Error("array index must be greater than or equal to 1");if(n>length(e))throw new Error("array index must be less than or equal to length of array");return e[n-1]}{let t=array(n);return assert(is_array(t,"integer"),"parameter `items` should be an integer or an array of integers"),t.map(n=>_select_array(e,n))}}function _select_object(e,n){if(is_string(n)){const t=e[n];if(void 0===t)throw new Error(`object does not have a property named "${n}"`);return t}{let t=array(n);assert(is_array(t,"string"),"parameter `items` should be an array of strings");let a={};return t.forEach(n=>{a[n]=e[n]}),a}}function _select_table(e,n){if(is_string(n)){const t=e.data[n];if(void 0===t)throw new Error(`table does not have a column named "${n}"`);return t}if(is_integer(n)){const t=Object.keys(e.data);if(n<1)throw new Error("column index must be greater than or equal to 1");if(n>length(t))throw new Error("column index must be less than or equal to number of columns");return e.data[t[n-1]]}if(is_array(n)){let t={type:"table",data:{},rows:e.rows};return n.forEach(n=>{t.data[n]=_select_table(e,n)}),t.columns=Object.keys(t.data).length,t}}function sleep(e){assert(is_number(e),"parameter `seconds` must be a number");const n=(new Date).getTime();for(;(new Date).getTime()<n+1e3*e;);return e}function snake_case(e){return assert(is_string(e),"parameter `value` must be a string"),lodash.snakeCase(e)}function subtract(e,n){return assert(is_number(e),"parameter `value` must be a number"),assert(is_number(n),"parameter `other` must be a number"),e-n}function sum(...e){return _reduce(0,(e,n)=>e+n,is_number,...e)}function t_test(e,n,t,a,r,s){const o=stdlib.stats.ttest,u={mu:t||0,alternative:["less","two-sided","greater"][(a||0)+1],alpha:s||.05};let i;return{type:"t_test",mean:(i=r?o(e,n,u):o(e,n?Object.assign(u,{mu:mean(n)+u.mu}):u)).mean,sd:i.sd,statistic:i.statistic,ci:i.ci,df:i.df,p_value:i.pValue,rejected:i.rejected}}function upper_case(e){return assert(is_string(e),"parameter `value` must be a string"),lodash.upperCase(e)}stdlib=stdlib&&stdlib.hasOwnProperty("default")?stdlib.default:stdlib,jStat=jStat&&jStat.hasOwnProperty("default")?jStat.default:jStat;const type$1="library",name="core";let funcs={add:{type:"function",name:"add",description:"Returns the addition of two values. The plus sign, `+`, is used as an alias for `add` e.g. `x + y` is equivalent to `add(x, y)`.\n Both values have to be of the same type: number, string, array, table or object. If the values are array, table or object, the function\n will use either extend or append to add the values.",summary:"Addition of two values.",methods:{"add(value: number|string|array|table|object, other: number|string|array|table|object)":{signature:"add(value: number|string|array|table|object, other: number|string|array|table|object)",params:[{name:"value",type:"number|string|array|table|object",description:"The value to have other value added."},{name:"other",type:"number|string|array|table|object",description:"The other value."}],examples:[{usage:"// returns 6\n add(2, 4)"},{usage:"// returns [1, 2, 3, 4]\n add([1,2], [3,4])"}]}},source:{type:"text",lang:"js",data:"import append from './append'\nimport extend from './extend'\nimport is_array from './is_array'\nimport is_number from './is_number'\nimport is_object from './is_object'\nimport is_string from './is_string'\nimport is_table from './is_table'\nimport type from './type'\n\n/**\n* @summary Addition of two values.\n*\n* @description\n*\n* Returns the addition of two values. The plus sign, `+`, is used as an alias for `add` e.g. `x + y` is equivalent to `add(x, y)`.\n* Both values have to be of the same type: number, string, array, table or object. If the values are array, table or object, the function\n* will use either extend or append to add the values.\n*\n* @param {number|string|array|table|object} value The value to have other value added.\n* @param {number|string|array|table|object} other The other value.\n* @returns {number|string|array|table|object} Result of addition.\n*\n* @example\n* // returns 6\n* add(2, 4)\n*\n* @example\n* // returns [1, 2, 3, 4]\n* add([1,2], [3,4])\n*/\n\nexport default function add (value, other) {\n  if (is_number(value) && is_number(other)) return value + other\n  if (is_string(value) && is_string(other)) return value + other\n  if (is_array(value)) return append(value, other)\n  if (is_object(value) && is_object(other)) return extend(value, other)\n  if (is_table(value) && is_table(other)) return append(value, other)\n  throw new Error(`cannot add a \"${type(value)}\" and a \"${type(other)}\"`)\n}\n"}}};funcs.add.body=add,funcs.aggregate={type:"function",name:"aggregate",description:"Aggregates values provided either in an array or a table. If the values come in an array,\n the variables to aggregate by must also be an array of the same length. If the values come\n in a table, the variables to aggregate by must be strings corresponding to the table column\n names. The summary function(s) used for aggregation need to be provided as an object. You can\n use the typical summary functions such as 'sum', 'min', 'max' and so on.",title:"aggregate",summary:"Aggregate values by the specified variable(s) using summary function(s).",methods:{"aggregate(value: array|table, by: array|string, summaries: any): table|array":{signature:"aggregate(value: array|table, by: array|string, summaries: any): table|array",params:[{name:"value",type:"array|table",description:"The values to be aggregated. Must be either array or table."},{name:"by",type:"array|string",description:"The variable(s) for the value to be aggregated by. Must be either string or array."},{name:"summaries",type:"any",description:"The summary function(s) to be used for aggregation. Must be an object."}],return:{type:"table|array",description:"Aggregated data in table or array."},examples:[{usage:"aggregate(value, by, summaries)"},{usage:"// returns table({\n region: ['N', 'S', 'W', 'E'],\n min_v1: [1, 3, 5, 9],\n sum_v2: [2, 2, 4, 1]})",caption:"Example usage of aggregate function."},{usage:"table1 = table({\n region: ['N', 'N', 'S', 'S', 'W', 'W', 'W', 'W', 'E'],\n v1: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n v2: [1, 1, 1, 1, 1, 1, 1, 1, 1]\n })\n aggregate(table1, 'region',{min_v1:'min(group.v1)', sum_v2:'sum(group.v2)' } )"}]}},source:{type:"text",lang:"js",data:"import array from './array'\nimport assert from './assert'\nimport is_array from './is_array'\nimport is_object from './is_object'\nimport is_string from './is_string'\nimport is_table from './is_table'\nimport length from './length'\nimport table from './table'\n\n/**\n* @title aggregate\n* @summary Aggregate values by the specified variable(s) using summary function(s).\n*\n* @description\n*\n* Aggregates values provided either in an array or a table. If the values come in an array,\n* the variables to aggregate by must also be an array of the same length. If the values come\n* in a table, the variables to aggregate by must be strings corresponding to the table column\n* names. The summary function(s) used for aggregation need to be provided as an object. You can\n* use the typical summary functions such as 'sum', 'min', 'max' and so on.\n*\n* @param {(array|table)} value The values to be aggregated. Must be either array or table.\n* @param {(array|string)} by The variable(s) for the value to be aggregated by. Must be either string or array.\n* @param {any} summaries The summary function(s) to be used for aggregation. Must be an object.\n* @return {(table|array)} Aggregated data in table or array.\n*\n* @implem js\n* @example aggregate(value, by, summaries)\n*\n* @example <caption>Example usage of aggregate function.</caption>\n* // returns table({\n* region: ['N', 'S', 'W', 'E'],\n* min_v1: [1, 3, 5, 9],\n* sum_v2: [2, 2, 4, 1]})\n*\n* @example\n* table1 = table({\n* region: ['N', 'N', 'S', 'S', 'W', 'W', 'W', 'W', 'E'],\n* v1: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n* v2: [1, 1, 1, 1, 1, 1, 1, 1, 1]\n* })\n* aggregate(table1, 'region',{min_v1:'min(group.v1)', sum_v2:'sum(group.v2)' } )\n*/\n\nexport default function aggregate (value, by, summaries) {\n  if (is_array(value)) return _aggregate_array(value, by, summaries)\n  else if (is_table(value)) return _aggregate_table(value, by, summaries)\n  else throw new Error('parameter `value` must be an array or a table')\n}\n\nfunction _aggregate_array (value, by, summaries) {\n  assert(is_array(by), 'parameter `by` must be an array')\n  assert(length(by) === length(value), 'parameter `by` must be the same length as `value` array')\n  assert(is_object(summaries), 'parameter `summaries` must be an object')\n\n  let groups = {}\n  value.forEach(function (item, index) {\n    const group = by[index]\n    if (groups[group]) groups[group].push(item)\n    else groups[group] = [item]\n  })\n  let aggregated = {\n    group: Object.keys(groups)\n  }\n  Object.keys(summaries).forEach(function (summary) {\n    // It is not possible to use a Function here because it does not\n    // use the module's scope as a closure so does not have access to summary\n    // functions like `min`, `mean`, `sum` etc\n    // let summariser = new Function('values', `return ${summaries[summary]}`)\n    let summariser = function (values) { return eval(summaries[summary]) } // eslint-disable-line no-eval\n    aggregated[summary] = Object.keys(groups).map(group => summariser(groups[group]))\n  })\n  return table(aggregated)\n}\n\nfunction _aggregate_table (value, by, summaries) {\n  assert(is_object(summaries), 'parameter `summaries` must be an object')\n  assert(is_string(by) || is_array(by, 'string'), 'parameter `by` must be a string, or an array of strings')\n  by = array(by)\n\n  let groups = {}\n  for (let row = 0; row < value.rows; row++) {\n    let group = []\n    by.forEach(function (name) {\n      let grouper = value.data[name]\n      if (typeof grouper === 'undefined') throw new Error(`table does not have column '${name}'`)\n      group.push(grouper[row])\n    })\n    // TODO Better way to greate a unique key from an array of values\n    let key = group.map(value => value.toString()).join('_@_@_')\n    if (groups[key]) {\n      for (let name of Object.keys(value.data)) groups[key][name].push(value.data[name][row])\n    } else {\n      groups[key] = {}\n      for (let name of Object.keys(value.data)) groups[key][name] = [value.data[name][row]]\n    }\n  }\n  let aggregated = {}\n  by.forEach(function (name) {\n    aggregated[name] = []\n  })\n  Object.keys(summaries).forEach(function (summary) {\n    aggregated[summary] = []\n  })\n  Object.keys(groups).forEach(function (key) {\n    let group = groups[key]\n    by.forEach(function (name) {\n      aggregated[name].push(group[name][0])\n    })\n    Object.keys(summaries).forEach(function (summary) {\n      let summariser = function (group) { return eval(summaries[summary]) } // eslint-disable-line no-eval\n      aggregated[summary].push(summariser(group))\n    })\n  })\n  return table(aggregated)\n}\n"}},funcs.aggregate.body=aggregate,funcs.and={type:"function",name:"and",description:"",title:"and",summary:"Logical AND.",methods:{"and(value: boolean, other: boolean): boolean":{signature:"and(value: boolean, other: boolean): boolean",params:[{name:"value",type:"boolean",description:"The first value."},{name:"other",type:"boolean",description:"The other value."}],return:{type:"boolean",description:"True if both values are true, else false."},examples:[{usage:"and(value, other)"},{usage:"// returns True",caption:"Example usage of and function."},{usage:"and(True, False)"}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_boolean from './is_boolean'\n\n/**\n* @title and\n* @summary Logical AND.\n*\n* @param {boolean} value The first value.\n* @param {boolean} other The other value.\n* @return {boolean} True if both values are true, else false.\n*\n* @implem js\n*\n* @example and(value, other)\n* @example <caption>Example usage of and function.</caption>\n* // returns True\n* @example and(True, False)\n*\n*/\n\nexport default function and (value, other) {\n  assert(is_boolean(value), 'parameter `value` must be a boolean')\n  assert(is_boolean(other), 'parameter `other` must be a boolean')\n  return value && other\n}\n"}},funcs.and.body=and,funcs.append={type:"function",name:"append",description:"Appends the element to the array and returns the new array, with the appended item.",title:"append",summary:"Appends an element to the array.",methods:{"append(value: array, other: any): array":{signature:"append(value: array, other: any): array",params:[{name:"value",type:"array",description:"The array."},{name:"other",type:"any",description:"The element to be appended."}],return:{type:"array",description:"The array with appended element."},examples:[{usage:"append(array, element)"},{usage:'// returns [1, 3, 6, "hello"]\n append([1, 3, 6], "hello")',caption:"Example usage of append function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport clone from './clone'\nimport is_array from './is_array'\n\n/**\n* @title append\n* @name append\n* @summary Appends an element to the array.\n*\n* @description\n*\n* Appends the element to the array and returns the new array, with the appended item.\n*\n* @param {array} value The array.\n* @param {any} other The element to be appended.\n* @return {array} The array with appended element.\n*\n* @implem js\n*\n* @example append(array, element)\n* @example <caption>Example usage of append function.</caption>\n* // returns [1, 3, 6, \"hello\"]\n* append([1, 3, 6], \"hello\")\n*\n*/\n\nexport default function append (value, other) {\n  assert(is_array(value), 'parameter `value` must be an array')\n  let result = clone(value)\n  if (is_array(other)) result.push(...other)\n  else result.push(other)\n  return result\n}\n"}},funcs.append.body=append,funcs.array={type:"function",name:"array",description:"Creates an array from the provided value. If the value is a table, returns an array of objects where  each object has\n a property with the same name as the columns and the value of the property equal to the elements in the rows.",title:"array",summary:"Turns the value into an array.",methods:{"array(value: any): array":{signature:"array(value: any): array",params:[{name:"value",type:"any",description:"The value to be turned into an array."}],return:{type:"array",description:"The created array."},examples:[{usage:"array(value)"},{usage:"// returns [\"hello\"]\n array( \"hello\")\n\n // returns [1,2,3]\n array([1,2,3])\n\n // returns [{ a: 1, b: '1' }, { a: 2, b: '2' }, { a: 3, b: '3' }]\n array( table({a: [1, 2, 3], b: ['1', '2', '3']} )",caption:"Example usage of array function."}]}},source:{type:"text",lang:"js",data:"import is_array from './is_array'\nimport is_table from './is_table'\n\n/**\n* @title array\n* @name array\n* @summary Turns the value into an array.\n*\n* @description\n* Creates an array from the provided value. If the value is a table, returns an array of objects where  each object has\n* a property with the same name as the columns and the value of the property equal to the elements in the rows.\n*\n*\n* @param {any} value The value to be turned into an array.\n* @return {array} The created array.\n*\n* @implem js\n*\n* @example array(value)\n* @example <caption>Example usage of array function.</caption>\n*\n* // returns [\"hello\"]\n* array( \"hello\")\n*\n* // returns [1,2,3]\n* array([1,2,3])\n*\n* // returns [{ a: 1, b: '1' }, { a: 2, b: '2' }, { a: 3, b: '3' }]\n* array( table({a: [1, 2, 3], b: ['1', '2', '3']} )\n*\n*/\n\nexport default function array (value) {\n  if (is_array(value)) return value\n  else if (is_table(value)) return _array_table(value)\n  else return [value]\n}\n\nfunction _array_table (table) {\n  let colNames = Object.keys(table.data)\n  let array = []\n  for (var rowNumber = 0; rowNumber < table.rows; rowNumber++) {\n    let rowData = {}\n    for (let colName of colNames) {\n      rowData[colName] = table.data[colName][rowNumber]\n    }\n    array.push(rowData)\n  }\n  return array\n}\n"}},funcs.array.body=array,funcs.assert={type:"function",name:"assert",description:"",title:"assert",summary:"Checks if the condition is met and displays predefined message.",methods:{"assert(condition: boolean, message: string): boolean":{signature:"assert(condition: boolean, message: string): boolean",params:[{name:"condition",type:"boolean"},{name:"message",type:"string"}],return:{type:"boolean",description:"If the condition is met, returns true. Otherwise, throws an error.."},examples:[{usage:"assert(condition, message)"},{usage:'// returns True\n assert((1 === 1, "one should equal one")',caption:"Example usage of assert function."}]}},source:{type:"text",lang:"js",data:'\n/**\n* @title assert\n* @name assert\n* @summary Checks if the condition is met and displays predefined message.\n*\n*\n*\n* @param {boolean} condition\n* @param {string} message\n* @return {boolean} If the condition is met, returns true. Otherwise, throws an error..\n*\n* @example assert(condition, message)\n* @example <caption>Example usage of assert function.</caption>\n* // returns True\n* assert((1 === 1, "one should equal one")\n*\n*/\n\nexport default function assert (condition, message) {\n  if (!condition) throw new Error(message)\n  return true\n}\n'}},funcs.assert.body=assert,funcs.between={type:"function",name:"between",description:"Checks if the given value is within the defined range (between lower and upper)\n and returns true if the value is between lower and upper, otherwise returns false.",title:"between",summary:"Check if given value is within range.",methods:{"between(value: number, lower: number, upper: number): boolean":{signature:"between(value: number, lower: number, upper: number): boolean",params:[{name:"value",type:"number",description:"The tested value"},{name:"lower",type:"number",description:"The lower bound of the range."},{name:"upper",type:"number",description:"The lower bound of the range.he upper bound of the range."}],return:{type:"boolean",description:"True if the value is between lower and upper, else false."},examples:[{usage:"between(x, upper, lower)"},{usage:"// returns True\n between(2,1,5)",caption:"Example usage of between function."}]}},source:{type:"text",lang:"js",data:"import stdlib from '@stdlib/stdlib'\n\n/**\n* @title between\n* @summary Check if given value is within range.\n*\n* @description\n*\n* Checks if the given value is within the defined range (between lower and upper)\n* and returns true if the value is between lower and upper, otherwise returns false.\n*\n* @param {number} value The tested value\n* @param {number} lower The lower bound of the range.\n* @param {number} upper The lower bound of the range.he upper bound of the range.\n* @return {boolean} True if the value is between lower and upper, else false.\n*\n* @example between(x, upper, lower)\n* @example <caption>Example usage of between function.</caption>\n* // returns True\n* between(2,1,5)\n*/\n\nexport default function between (value, upper, lower) {\n  return stdlib.assert.isBetween(value, upper, lower)\n}\n"}},funcs.between.body=between,funcs.camel_case={type:"function",name:"camel_case",description:"Concatenates words or phrases in a way that each word or abbreviation in the middle of the phrase\n begins with a capital letter. No spaces or punctuation is used.",title:"camel_case",summary:"Concatenates words and phrases, removing all punctuation.",methods:{"camel_case(value: string): string":{signature:"camel_case(value: string): string",params:[{name:"value",type:"string",description:"The string to be concatenated to Camel Case."}],return:{type:"string",description:"Returns the value concatenated to Camel Case."},examples:[{usage:"camel_case(camel_case)"},{usage:'// returns CamelCaseExample\n camel_case("Camel Case Example")',caption:"Example usage of camel_case function."}]}},source:{type:"text",lang:"js",data:"import { camelCase } from 'lodash'\n\nimport assert from './assert'\nimport is_string from './is_string'\n\n/**\n* @title camel_case\n* @name camel_case\n* @summary Concatenates words and phrases, removing all punctuation.\n*\n* @description Concatenates words or phrases in a way that each word or abbreviation in the middle of the phrase\n* begins with a capital letter. No spaces or punctuation is used.\n*\n* @param {string} value The string to be concatenated to Camel Case.\n* @return {string} Returns the value concatenated to Camel Case.\n*\n* @implem js\n*\n* @example camel_case(camel_case)\n* @example <caption>Example usage of camel_case function.</caption>\n*\n* // returns CamelCaseExample\n* camel_case(\"Camel Case Example\")\n*\n*/\n\nexport default function camel_case (value) {\n  assert(is_string(value), 'parameter `value` must be a string')\n\n  return camelCase(value)\n}\n"}},funcs.camel_case.body=camel_case,funcs.clone={type:"function",name:"clone",description:"Creates a deep (recursive) clone of the value. Uses lodash cloneDeep.",title:"clone",summary:"Creates a deep (recursive) clone of the value.",methods:{"clone(value: any): any":{signature:"clone(value: any): any",params:[{name:"value",type:"any",description:"The value to clone."}],return:{type:"any",description:"Returns exact (recursive) clone of the value."},examples:[{usage:"clone(condition, message)"},{usage:"// returns [{ 'a': 1 }, { 'b': 2 }]\n clone([{ 'a': 1 }, { 'b': 2 }])",caption:"Example usage of clone function."}]}},source:{type:"text",lang:"js",data:"import { cloneDeep } from 'lodash'\n\n/**\n* @title clone\n* @name clone\n* @summary Creates a deep (recursive) clone of the value.\n*\n* @description Creates a deep (recursive) clone of the value. Uses lodash cloneDeep.\n*\n* @param {any} value The value to clone.\n* @return {any} Returns exact (recursive) clone of the value.\n*\n* @implem js\n*\n* @example clone(condition, message)\n* @example <caption>Example usage of clone function.</caption>\n*\n* // returns [{ 'a': 1 }, { 'b': 2 }]\n* clone([{ 'a': 1 }, { 'b': 2 }])\n*\n*/\n\nexport default function clone (value) {\n  return cloneDeep(value)\n}\n"}},funcs.clone.body=clone,funcs.close={type:"function",name:"close",description:"Checks if the given value is close to another value, within a defined precision range\n Returns true, if the value is close to another within the defined precision, else, returns false.",title:"close",summary:"Is a value close to another?",methods:{"close(value: number, expected: number, precision: number): boolean":{signature:"close(value: number, expected: number, precision: number): boolean",params:[{name:"value",type:"number",description:"The tested value"},{name:"expected",type:"number",description:"The value to compare to."},{name:"precision",type:"number",description:"The precision of the comparison."}],return:{type:"boolean",description:"True if the value is within plus or minus precision of the other value, else false."},examples:[{usage:"close(x, upper, lower)"},{usage:"// returns True\n close(1.2,1,0.3)",caption:"Example usage of close function."}]}},source:{type:"text",lang:"js",data:"import stdlib from '@stdlib/stdlib'\n\n/**\n* @title close\n* @summary Is a value close to another?\n*\n* @description\n*\n* Checks if the given value is close to another value, within a defined precision range\n* Returns true, if the value is close to another within the defined precision, else, returns false.\n*\n*\n* @param {number} value The tested value\n* @param {number} expected The value to compare to.\n* @param {number} precision The precision of the comparison.\n* @return {boolean} True if the value is within plus or minus precision of the other value, else false.\n*\n* @example close(x, upper, lower)\n* @example <caption>Example usage of close function.</caption>\n* // returns True\n* close(1.2,1,0.3)\n*\n*/\n\nexport default function close (value, expected, precision) {\n  return stdlib.assert.isBetween(\n    value, expected - precision, expected + precision,\n    'closed', 'closed'\n  )\n}\n"}},funcs.close.body=close,funcs.divide={type:"function",name:"divide",description:"Divide two numbers. The slash, `/`, is used as an alias for `divide` e.g.\n `x / y` is equivalent to `divide(x, y)`.",title:"divide",summary:"Divide two numbers",methods:{"divide(value: number, other: number): number":{signature:"divide(value: number, other: number): number",params:[{name:"value",type:"number",description:"The value to be divided"},{name:"other",type:"number",description:"The divisor"}],return:{type:"number",description:"Division result"},examples:[{usage:"divide(x, y)\n // return  3.3333333333333335\n divide(10, 3)"}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_number from './is_number'\n\n/**\n* @name divide\n* @title divide\n* @summary Divide two numbers\n*\n* @description\n*\n* Divide two numbers. The slash, `/`, is used as an alias for `divide` e.g.\n* `x / y` is equivalent to `divide(x, y)`.\n*\n* @param {number} value The value to be divided\n* @param {number} other The divisor\n* @return {number} Division result\n*\n* @example divide(x, y)\n* // return  3.3333333333333335\n* divide(10, 3)\n*\n* @implem js\n*\n* @author Nokome Bentley\n*/\n\nexport default function divide (value, other) {\n  assert(is_number(value), 'parameter `value` must be a number')\n  assert(is_number(other), 'parameter `other` must be a number')\n  return value / other\n}\n"}},funcs.divide.body=divide,funcs.equal={type:"function",name:"equal",description:"Performs a deep comparison between two values to determine if they are equivalent.",summary:"Are two values equal?",methods:{"equal(value: number, other: number): boolean":{signature:"equal(value: number, other: number): boolean",params:[{name:"value",type:"number",description:"The value to be compared."},{name:"other",type:"number",description:"The value compared to."}],return:{type:"boolean",description:"True if the values are equivalent, else false."},examples:[{usage:"// returns true\n equal(1, 1)"}]}},source:{type:"text",lang:"js",data:"import { isEqual } from 'lodash'\n\nimport type from './type'\n\n/**\n* @summary Are two values equal?\n*\n* @description\n*\n* Performs a deep comparison between two values to determine if they are equivalent.\n*\n* @param {number} value The value to be compared.\n* @param {number} other The value compared to.\n* @return {boolean} True if the values are equivalent, else false.\n*\n* @example\n* // returns true\n* equal(1, 1)\n*/\n\nexport default function equal (value, other) {\n  const type_ = type(value)\n  if (type_ !== type(other)) return false\n  else return isEqual(value, other)\n}\n"}},funcs.equal.body=equal,funcs.extend={type:"function",name:"extend",description:"",title:"extend",summary:"Extends the value (array, object or table) with a given extension.",methods:{"extend(value: array|object|table, extensions: any): array|object|table":{signature:"extend(value: array|object|table, extensions: any): array|object|table",params:[{name:"value",type:"array|object|table",description:"The value to be extended."},{name:"extensions",type:"any",description:"The extension to be added to the value."}],return:{type:"array|object|table",description:"The extended value."},examples:[{usage:"extend(value, extension)"},{usage:"// returns [1, 2, 3]\n extend([1], [2, 3])",caption:"Example usage of extend function."}]}},source:{type:"text",lang:"js",data:"import array from './array'\nimport assert from './assert'\nimport clone from './clone'\nimport is_array from './is_array'\nimport is_object from './is_object'\nimport is_table from './is_table'\nimport table from './table'\n\n/**\n* @title extend\n* @name extend\n* @summary Extends the value (array, object or table) with a given extension.\n*\n*\n* @param {array|object|table} value The value to be extended.\n* @param {any} extensions The extension to be added to the value.\n* @return {array|object|table} The extended value.\n*\n* @implem js\n*\n* @example extend(value, extension)\n* @example <caption>Example usage of extend function.</caption>\n*\n* // returns [1, 2, 3]\n* extend([1], [2, 3])\n*\n*/\n\nexport default function extend (value, extensions) {\n  if (is_array(value)) return _extend_array(value, extensions)\n  else if (is_table(value)) return _extend_table(value, extensions)\n  else if (is_object(value)) return _extend_object(value, extensions)\n  else throw new Error('parameter `value` must be an array, an object or a table')\n}\n\nfunction _extend_array (value, extensions) {\n  assert(is_array(extensions), 'parameter `extensions` must be an array')\n\n  return value.concat(extensions)\n}\n\nfunction _extend_object (value, extensions) {\n  assert(is_object(extensions), 'parameter `extensions` must be an object')\n\n  let extended = clone(value)\n  Object.keys(extensions).forEach(function (name) {\n    let extension = extensions[name]\n    let extender = new Function('object', `with(object) { return ${extension} }`) // eslint-disable-line no-new-func\n    extended[name] = extender(extended)\n  })\n  return extended\n}\n\nfunction _extend_table (value, extensions) {\n  assert(is_object(extensions), 'parameter `extensions` must be an object')\n\n  let objects = array(value)\n  Object.keys(extensions).forEach(function (name) {\n    let extension = extensions[name]\n    let extender = new Function('object', `with(object) { return ${extension} }`) // eslint-disable-line no-new-func\n    objects.forEach(function (object) {\n      object[name] = extender(object)\n    })\n  })\n  return table(objects)\n}\n"}},funcs.extend.body=extend,funcs.filter={type:"function",name:"filter",description:"Filters data from the provided value (array, table or object) matching given clause (parameters)\n and returns it as an array, table or object.",title:"filter",summary:"Filters the data matching the given clause.",methods:{"filter(value: array|table|object, clause: number): array|table|object":{signature:"filter(value: array|table|object, clause: number): array|table|object",params:[{name:"value",type:"array|table|object",description:"The data to be filtered."},{name:"clause",type:"number",description:"The clause to be match for filtering."}],return:{type:"array|table|object",description:"The array, table or object containing filtered values matching the clause."},examples:[{usage:"filter(value, clause)"},{usage:"// returns ['b', 'c']\n filter(['a', 'b', 'c'],  'index == 2 || value == \"c\"')",caption:"Example usage of filter function."}]}},source:{type:"text",lang:"js",data:"import array from './array'\nimport is_array from './is_array'\nimport is_object from './is_object'\nimport is_table from './is_table'\nimport table from './table'\n\n/**\n* @title filter\n* @name filter\n* @summary Filters the data matching the given clause.\n*\n* @description\n*\n* Filters data from the provided value (array, table or object) matching given clause (parameters)\n* and returns it as an array, table or object.\n*\n* @param {array|table|object} value The data to be filtered.\n* @param {number} clause The clause to be match for filtering.\n* @return {array|table|object} The array, table or object containing filtered values matching the clause.\n*\n* @implem js\n*\n* @example filter(value, clause)\n* @example <caption>Example usage of filter function.</caption>\n* // returns ['b', 'c']\n* filter(['a', 'b', 'c'],  'index == 2 || value == \"c\"')\n*\n*/\n\nexport default function filter (value, clause) {\n  if (is_array(value)) return _filter_array(value, clause)\n  else if (is_table(value)) return _filter_table(value, clause)\n  else if (is_object(value)) return _filter_object(value, clause)\n  else throw new Error('parameter `value` must be an array, an object, or a table')\n}\n\nfunction _filter_array (value, clause) {\n  let matcher = new Function('index', 'value', `return ${clause}`) // eslint-disable-line no-new-func\n  let matched = []\n  value.forEach((value, index) => {\n    if (matcher(index + 1, value)) matched.push(value)\n  })\n  return matched\n}\n\nfunction _filter_object (value, clause) {\n  let matcher = new Function('name', 'value', `return ${clause}`) // eslint-disable-line no-new-func\n  let matched = {}\n  Object.keys(value).forEach(name => {\n    if (matcher(name, value[name])) matched[name] = value[name]\n  })\n  return matched\n}\n\nfunction _filter_table (value, clause) {\n  let matcher = new Function('row', 'object', `with(object) { return ${clause} }`) // eslint-disable-line no-new-func\n  let matched = []\n  array(value).forEach((object, row) => {\n    if (matcher(row + 1, object)) matched.push(object)\n  })\n  if (matched.length) return table(matched)\n  else {\n    const columns = {}\n    for (let name of Object.keys(value.data)) {\n      columns[name] = []\n    }\n    return table(columns)\n  }\n}\n"}},funcs.filter.body=filter,funcs.greater_or_equal={type:"function",name:"greater_or_equal",description:"Checks if the given value is greater or equal, to the other value.",title:"greater_or_equal",summary:"Check if the given value is greater or equal, to the other value.",methods:{"greater_or_equal(value: any, other: any): boolean":{signature:"greater_or_equal(value: any, other: any): boolean",params:[{name:"value",type:"any",description:"The value to be tested."},{name:"other",type:"any",description:"The other value to be tested against."}],return:{type:"boolean",description:"If the given value is greater or equal to the other value returns true, else false."},examples:[{usage:"greater_or_equal(value, other)"},{usage:"//returns True\n greater_or_equal(2,1)",caption:"Example usage of greater_or_equal function."}]}},source:{type:"text",lang:"js",data:"\n/**\n* @title greater_or_equal\n* @name greater_or_equal\n* @summary Check if the given value is greater or equal, to the other value.\n*\n* @description\n*\n* Checks if the given value is greater or equal, to the other value.\n*\n* @name greater_or_equal\n*\n* @param {any} value The value to be tested.\n* @param {any} other The other value to be tested against.\n* @return {boolean} If the given value is greater or equal to the other value returns true, else false.\n*\n* @implem js\n*\n* @example greater_or_equal(value, other)\n* @example <caption>Example usage of greater_or_equal function.</caption>\n //returns True\n* greater_or_equal(2,1)\n*\n*/\n\nexport default function greater_or_equal (value, other) {\n  return value >= other\n}\n"}},funcs.greater_or_equal.body=greater_or_equal,funcs.greater={type:"function",name:"greater",description:"",title:"greater",summary:"Check if given value is greater than the other.",methods:{"greater(value: number, other: number): boolean":{signature:"greater(value: number, other: number): boolean",params:[{name:"value",type:"number",description:"The tested value"},{name:"other",type:"number",description:"The other value to test against."}],return:{type:"boolean",description:"True if the value is greater than the other, else false."},examples:[{usage:"greater(value, other)"},{usage:"//  returns True",caption:"Example usage of greater function."},{usage:"greater(2,1)"}]}},source:{type:"text",lang:"js",data:"/**\n* @title greater\n* @name greater\n* @summary Check if given value is greater than the other.\n*\n*\n* @param {number} value The tested value\n* @param {number} other The other value to test against.\n* @return {boolean} True if the value is greater than the other, else false.\n*\n* @implem js\n*\n* @example greater(value, other)\n* @example <caption>Example usage of greater function.</caption>\n* //  returns True\n* @example greater(2,1)\n*\n*/\n\nexport default function greater (value, other) {\n  return value > other\n}\n"}},funcs.greater.body=greater,funcs.is_array={type:"function",name:"is_array",description:"Checks the types of elements that the array contains. Returns true if the elements are of the given type, else returns false.",title:"is_array",summary:"Checks if the array is the array of the given type of elements.",methods:{"is_array(value: array, type: string): boolean":{signature:"is_array(value: array, type: string): boolean",params:[{name:"value",type:"array",description:"The array to be checked."},{name:"type",type:"string",description:'The type of element, by default the value is "any".'}],return:{type:"boolean",description:"Tue if array contains the elements of given type, else false."},examples:[{usage:'// returns true\n is_array([true, false], "boolean")',caption:"Example usage of is_array function."}]}},source:{type:"text",lang:"js",data:"import stdlib from '@stdlib/stdlib'\n\nimport assert from './assert'\nimport is_string from './is_string'\n\n/**\n* @title is_array\n* @name is_array\n* @summary Checks if the array is the array of the given type of elements.\n*\n* @description\n*\n* Checks the types of elements that the array contains. Returns true if the elements are of the given type, else returns false.\n*\n* @param {array} value The array to be checked.\n* @param {string} type The type of element, by default the value is \"any\".\n* @return {boolean} Tue if array contains the elements of given type, else false.\n*\n* @implem js\n*\n* @example <caption>Example usage of is_array function.</caption>\n* // returns true\n* is_array([true, false], \"boolean\")\n*\n*/\n\nexport default function is_array (value, type = 'any') {\n  assert(is_string(type), 'parameter `type` must be a string')\n\n  const sa = stdlib.assert\n  switch (type) {\n    case 'any': return sa.isArray(value)\n    case 'boolean': return sa.isBooleanArray(value)\n    case 'integer': return sa.isIntegerArray(value)\n    case 'number': return sa.isNumberArray(value)\n    case 'string': return sa.isStringArray(value)\n    case 'object': return sa.isObjectArray(value)\n    default: throw new Error(`Unknown type: ${type}`)\n  }\n}\n"}},funcs.is_array.body=is_array,funcs.is_boolean={type:"function",name:"is_boolean",description:"",title:"is_boolean",summary:"Checks if value is of type boolean.",methods:{"is_boolean(value: any)":{signature:"is_boolean(value: any)",params:[{name:"value",type:"any",description:"The value to be checked."}],examples:[{usage:"// returns true\n is_boolean(false)",caption:"Example usage of is_boolean function."}]}},source:{type:"text",lang:"js",data:"import stdlib from '@stdlib/stdlib'\n\n/**\n* @title is_boolean\n* @name is_boolean\n* @summary Checks if value is of type boolean.\n*\n*\n* @param {any} value The value to be checked.\n* @returns {boolean} True if the value is of type boolean, else false.\n*\n* @implem js\n* @example <caption>Example usage of is_boolean function.</caption>\n* // returns true\n* is_boolean(false)\n*\n*/\n\nexport default function is_boolean (value) {\n  return stdlib.assert.isBoolean(value)\n}\n"}},funcs.is_boolean.body=is_boolean,funcs.is_integer={type:"function",name:"is_integer",description:"",title:"is_integer",summary:"Checks if value is of type integer.",methods:{"is_integer(value: any)":{signature:"is_integer(value: any)",params:[{name:"value",type:"any",description:"The value to be checked."}],examples:[{usage:"// returns true\n is_integer(5)",caption:"Example usage of is_integer function."}]}},source:{type:"text",lang:"js",data:"import stdlib from '@stdlib/stdlib'\n\n/**\n* @title is_integer\n* @name is_integer\n* @summary Checks if value is of type integer.\n*\n*\n* @param {any} value The value to be checked.\n* @returns {boolean} True if the value is of type integer, else false.\n*\n* @implem js\n* @example <caption>Example usage of is_integer function.</caption>\n* // returns true\n* is_integer(5)\n*\n*/\n\nexport default function is_integer (value) {\n  return stdlib.assert.isInteger(value)\n}\n"}},funcs.is_integer.body=is_integer,funcs.is_number={type:"function",name:"is_number",description:"",title:"is_number",summary:"Checks if value is of type number.",methods:{"is_number(value: any)":{signature:"is_number(value: any)",params:[{name:"value",type:"any",description:"The value to be checked."}],examples:[{usage:"// returns true\n is_number(4.1)",caption:"Example usage of is_number function."}]}},source:{type:"text",lang:"js",data:"import stdlib from '@stdlib/stdlib'\n\n/**\n* @title is_number\n* @name is_number\n* @summary Checks if value is of type number.\n*\n*\n* @param {any} value The value to be checked.\n* @returns {boolean} True if the value is of type number, else false.\n*\n* @implem js\n* @example <caption>Example usage of is_number function.</caption>\n* // returns true\n* is_number(4.1)\n*\n*/\n\nexport default function is_number (value) {\n  return stdlib.assert.isNumber(value)\n}\n"}},funcs.is_number.body=is_number,funcs.is_object={type:"function",name:"is_object",description:"",title:"is_object",summary:"Checks if value is of type object.",methods:{"is_object(value: any)":{signature:"is_object(value: any)",params:[{name:"value",type:"any",description:"The value to be checked."}],examples:[{usage:"// returns true\n is_object([])",caption:"Example usage of is_object function."}]}},source:{type:"text",lang:"js",data:"import stdlib from '@stdlib/stdlib'\n\n/**\n* @title is_object\n* @name is_object\n* @summary Checks if value is of type object.\n*\n*\n* @param {any} value The value to be checked.\n* @returns {boolean} True if the value is of type object, else false.\n*\n* @implem js\n* @example <caption>Example usage of is_object function.</caption>\n* // returns true\n* is_object([])\n*\n*/\n\nexport default function is_object (value) {\n  return stdlib.assert.isObject(value)\n}\n"}},funcs.is_object.body=is_object,funcs.is_string={type:"function",name:"is_string",description:"",title:"is_string",summary:"Checks if value is of type string.",methods:{"is_string(value: any)":{signature:"is_string(value: any)",params:[{name:"value",type:"any",description:"The value to be checked."}],examples:[{usage:"// returns true\n is_string('false')",caption:"Example usage of is_string function."}]}},source:{type:"text",lang:"js",data:"import stdlib from '@stdlib/stdlib'\n\n/**\n* @title is_string\n* @name is_string\n* @summary Checks if value is of type string.\n*\n*\n* @param {any} value The value to be checked.\n* @returns {boolean} True if the value is of type string, else false.\n*\n* @implem js\n* @example <caption>Example usage of is_string function.</caption>\n* // returns true\n* is_string('false')\n*\n*/\n\nexport default function is_string (value) {\n  return stdlib.assert.isString(value)\n}\n"}},funcs.is_string.body=is_string,funcs.is_table={type:"function",name:"is_table",description:"",title:"is_table",summary:"Checks if value is of type table.",methods:{"is_table(value: any)":{signature:"is_table(value: any)",params:[{name:"value",type:"any",description:"The value to be checked."}],examples:[{usage:"// returns true\n is_table(table({a: [1, 2, 3]})",caption:"Example usage of is_table function."}]}},source:{type:"text",lang:"js",data:"/**\n* @title is_table\n* @name is_table\n* @summary Checks if value is of type table.\n*\n*\n* @param {any} value The value to be checked.\n* @returns {boolean} True if the value is of type table, else false.\n*\n* @implem js\n* @example <caption>Example usage of is_table function.</caption>\n* // returns true\n* is_table(table({a: [1, 2, 3]})\n*\n*/\n\nexport default function is_table (value) {\n  return typeof value === 'object' && value.type === 'table'\n}\n"}},funcs.is_table.body=is_table,funcs.kebab_case={type:"function",name:"kebab_case",description:'Concatenates words and phrases, connecting them with underscore "_". No spaces or other punctuation is used.',title:"kebab_case",summary:'Concatenates words and phrases, connecting them with underscore "_"',methods:{"kebab_case(value: string): string":{signature:"kebab_case(value: string): string",params:[{name:"value",type:"string",description:"The string to be concatenated to Kebab Case."}],return:{type:"string",description:"Returns the value concatenated to Kebab Case."},examples:[{usage:"kebab_case(kebab_case)"},{usage:'// returns Kebab_Case\n kebab_case("Kebab, Case")',caption:"Example usage of kebab_case function."}]}},source:{type:"text",lang:"js",data:"import { kebabCase } from 'lodash'\n\nimport assert from './assert'\nimport is_string from './is_string'\n\n/**\n* @title kebab_case\n* @name kebab_case\n* @summary Concatenates words and phrases, connecting them with underscore \"_\"\n*\n* @description Concatenates words and phrases, connecting them with underscore \"_\". No spaces or other punctuation is used.\n*\n* @param {string} value The string to be concatenated to Kebab Case.\n* @return {string} Returns the value concatenated to Kebab Case.\n*\n* @implem js\n*\n* @example kebab_case(kebab_case)\n* @example <caption>Example usage of kebab_case function.</caption>\n*\n* // returns Kebab_Case\n* kebab_case(\"Kebab, Case\")\n*\n*/\n\nexport default function kebab_case (value) {\n  assert(is_string(value), 'parameter `value` must be a string')\n\n  return kebabCase(value)\n}\n"}},funcs.kebab_case.body=kebab_case,funcs.length={type:"function",name:"length",description:"Returns the length of the given value. For the array, table or object,\n returns their actual length. For other types returns 1.",title:"length",summary:"Length of the value.",methods:{"length(value: anyt)":{signature:"length(value: anyt)",params:[{name:"value",type:"anyt",description:"The value which length is to be measured."}],examples:[{usage:'// returns 3\n length([2, 4, "t"])',caption:"Example usage of length function."}]}},source:{type:"text",lang:"js",data:"import is_array from './is_array'\nimport is_object from './is_object'\nimport is_table from './is_table'\n\n/**\n* @title length\n* @name length\n* @summary Length of the value.\n*\n* @description Returns the length of the given value. For the array, table or object,\n* returns their actual length. For other types returns 1.\n*\n* @param {anyt} value The value which length is to be measured.\n* @returns {number} The length of the value.\n*\n* @implem js\n*\n* @example <caption>Example usage of length function.</caption>\n* // returns 3\n* length([2, 4, \"t\"])\n*/\n\nexport default function length (value) {\n  if (is_array(value)) return value.length\n  else if (is_table(value)) return value.rows\n  else if (is_object(value)) return Object.keys(value).length\n  else return 1\n}\n"}},funcs.length.body=length,funcs.less_or_equal={type:"function",name:"less_or_equal",description:"",title:"less_or_equal",summary:"Check if given value is less or equal to the other one.",methods:{"less_or_equal(value: number, other: number): boolean":{signature:"less_or_equal(value: number, other: number): boolean",params:[{name:"value",type:"number",description:"The tested value"},{name:"other",type:"number",description:"The other value to test against."}],return:{type:"boolean",description:"True if the value is lower or equal, else false."},examples:[{usage:"less_or_equal(value, other)"},{usage:"// returns True\n less_or_equal(1,2)",caption:"Example usage of less_or_equal function."}]}},source:{type:"text",lang:"js",data:"/**\n* @title less_or_equal\n* @name less_or_equal\n* @summary Check if given value is less or equal to the other one.\n*\n*\n* @param {number} value The tested value\n* @param {number} other The other value to test against.\n* @return {boolean} True if the value is lower or equal, else false.\n*\n* @implem js\n*\n* @example less_or_equal(value, other)\n* @example <caption>Example usage of less_or_equal function.</caption>\n* // returns True\n* less_or_equal(1,2)\n*/\n\nexport default function less_or_equal (value, other) {\n  return value <= other\n}\n"}},funcs.less_or_equal.body=less_or_equal,funcs.less={type:"function",name:"less",description:"",title:"less",summary:"Check if given value is less than the other one.",methods:{"less(value: number, other: number): boolean":{signature:"less(value: number, other: number): boolean",params:[{name:"value",type:"number",description:"The tested value"},{name:"other",type:"number",description:"The other value to test against."}],return:{type:"boolean",description:"True if the value is less than the other, else false."},examples:[{usage:"less(value, other)"},{usage:"// returns True\n less(1,2)",caption:"Example usage of less function."}]}},source:{type:"text",lang:"js",data:"/**\n* @title less\n* @name less\n* @summary Check if given value is less than the other one.\n*\n*\n* @param {number} value The tested value\n* @param {number} other The other value to test against.\n* @return {boolean} True if the value is less than the other, else false.\n*\n* @implem js\n*\n* @example less(value, other)\n* @example <caption>Example usage of less function.</caption>\n* // returns True\n* less(1,2)\n*\n*/\n\nexport default function less (value, other) {\n  return value < other\n}\n"}},funcs.less.body=less,funcs.lower_case={type:"function",name:"lower_case",description:"",title:"lower_case",summary:"Changes all upper case to lower case in the string.",methods:{"lower_case(value: string): string":{signature:"lower_case(value: string): string",params:[{name:"value",type:"string",description:"The string to have upper case changed to lower case."}],return:{type:"string",description:"Returns the string with all lower case letters."},examples:[{usage:'// returns lower case\n lower_case("LoweR CasE")',caption:"Example usage of lower_case function."}]}},source:{type:"text",lang:"js",data:"import { lowerCase } from 'lodash'\n\nimport assert from './assert'\nimport is_string from './is_string'\n\n/**\n* @title lower_case\n* @name lower_case\n* @summary Changes all upper case to lower case in the string.\n*\n*\n* @param {string} value The string to have upper case changed to lower case.\n* @return {string} Returns the string with all lower case letters.\n*\n* @implem js\n*\n* @example <caption>Example usage of lower_case function.</caption>\n*\n* // returns lower case\n* lower_case(\"LoweR CasE\")\n*\n*/\n\nexport default function lower_case (value) {\n  assert(is_string(value), 'parameter `value` must be a string')\n\n  return lowerCase(value)\n}\n"}},funcs.lower_case.body=lower_case,funcs.max={type:"function",name:"max",description:"",title:"max",summary:"Maximum value of the given array of numbers. Based on jStat.max",methods:{"max()":{signature:"max()"}},source:{type:"text",lang:"js",data:"import jStat from 'jstat'\n\nimport { _wrap_array_number } from './_helpers'\n\n/**\n* @title max\n* @name max\n* @summary Maximum value of the given array of numbers. Based on jStat.max\n*\n*\n* @param {array[number]} value The tested array.\n* @return {number} The maxium value of the array.\n*\n* @example max(value)\n* @example <caption>Example usage of max function.</caption>\n* // returns 2\n* max([1,2])\n*\n*/\n\nexport default function max (value) {\n  return _wrap_array_number(jStat.max, value)\n}\n"}},funcs.max.body=max,funcs.mean={type:"function",name:"mean",description:"",summary:"Calculate arithmetic mean",methods:{"mean(value: any): number":{signature:"mean(value: any): number",params:[{name:"value",type:"any",repeats:!0,description:"The array of numbers to have arithmetic mean calculated."}],return:{type:"number",description:"The calculated mean."},examples:[{usage:"// returns 2\n mean([1, 2, 3])"}]}},source:{type:"text",lang:"js",data:"import is_number from './is_number'\n\nimport _reduce from './_reduce'\n\n/**\n* @summary Calculate arithmetic mean\n*\n* @param {...any} value The array of numbers to have arithmetic mean calculated.\n* @return {number} The calculated mean.\n*\n* @example\n* // returns 2\n* mean([1, 2, 3])\n*/\nexport default function mean (...values) {\n  let acc = _reduce({\n    sum: 0,\n    n: 0\n  }, (accumulator, value) => {\n    accumulator.sum += value\n    accumulator.n += 1\n    return accumulator\n  }, is_number, ...values)\n  return acc.sum / acc.n\n}\n"}},funcs.mean.body=mean,funcs.min={type:"function",name:"min",description:"",title:"min",summary:"Calculate minimum value from the array of numbers. Uses jStat.min",methods:{"min()":{signature:"min()"}},source:{type:"text",lang:"js",data:"import jStat from 'jstat'\n\nimport { _wrap_array_number } from './_helpers'\n\n/**\n* @title min\n* @name min\n* @summary Calculate minimum value from the array of numbers. Uses jStat.min\n*\n* @param {array[numbers]} value The array of numbers to have minimum calculated.\n* @return {number} The calculated minimum.\n*\n* @implem js\n*\n* @example min(value)\n* @example <caption>Example usage of min function.</caption>\n* // return 1;\n* min([1 ,2, 3])\n*\n*/\n\nexport default function min (value) {\n  return _wrap_array_number(jStat.min, value)\n}\n"}},funcs.min.body=min,funcs.multiply={type:"function",name:"multiply",description:"Multiply two numbers. The asterisk, `*`, is used as an alias for `multiply`\n e.g. `x * y` is equivalent to `multiply(x, y)`.",title:"multiply",summary:"Multiply two numbers",methods:{"multiply(value: number, other: number): number":{signature:"multiply(value: number, other: number): number",params:[{name:"value",type:"number",description:"The value to be multiplied."},{name:"other",type:"number",description:"The multiplier."}],return:{type:"number",description:"Muliplication result."},examples:[{usage:"multiply(x, y)"},{usage:"// return 6\n 2 * 3",caption:"Example usage of multiply function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_number from './is_number'\n\n/**\n* @title multiply\n* @name multiply\n*\n* @summary Multiply two numbers\n*\n* @description\n*\n* Multiply two numbers. The asterisk, `*`, is used as an alias for `multiply`\n* e.g. `x * y` is equivalent to `multiply(x, y)`.\n*\n* @param {number} value The value to be multiplied.\n* @param {number} other The multiplier.\n* @return {number} Muliplication result.\n*\n* @example multiply(x, y)\n* @example <caption>Example usage of multiply function.</caption>\n* // return 6\n* 2 * 3\n*\n*\n* @implem js\n* @author Nokome Bentley\n*/\n\nexport default function multiply (value, other) {\n  assert(is_number(value), 'parameter `value` must be a number')\n  assert(is_number(other), 'parameter `other` must be a number')\n  return value * other\n}\n"}},funcs.multiply.body=multiply,funcs.negative={type:"function",name:"negative",description:"Returns the negative of the value. The unary negation, `-` operator is an alias for `negative` e.g. `-x` is equivalent to `negative(x)`.",title:"negative",summary:"Return the negative of the value",methods:{"negative(value: number): number":{signature:"negative(value: number): number",params:[{name:"value",type:"number",description:"The value"}],return:{type:"number",description:"The negative of the value"},examples:[{usage:"negative(x)"},{usage:"// returns -2\n negative(2)",caption:"Example usage of negative function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_number from './is_number'\n\n/**\n* @name negative\n* @title negative\n* @summary Return the negative of the value\n*\n* @description\n*\n* Returns the negative of the value. The unary negation, `-` operator is an alias for `negative` e.g. `-x` is equivalent to `negative(x)`.\n*\n* @related postive\n* @param {number} value The value\n* @return {number} The negative of the value\n*\n* @example negative(x)\n* @example <caption>Example usage of negative function.</caption>\n* // returns -2\n* negative(2)\n*\n*\n* @implem js\n*\n* @author Nokome Bentley\n*/\n\nexport default function negative (value) {\n  assert(is_number(value), 'parameter `value` must be a number')\n  return -value\n}\n"}},funcs.negative.body=negative,funcs.not_equal={type:"function",name:"not_equal",description:"",title:"not_equal",summary:"Check if given value is not equal to the other.",methods:{"not_equal(value: number, other: number): boolean":{signature:"not_equal(value: number, other: number): boolean",params:[{name:"value",type:"number",description:"The tested value."},{name:"other",type:"number",description:"The other value to be tested against."}],return:{type:"boolean",description:"True if the value is between lower and upper, else false."},examples:[{usage:"not_equal(value, other)"},{usage:"// returns False\n not_equal(2,1)",caption:"Example usage of not_equal function."}]}},source:{type:"text",lang:"js",data:"import equal from './equal'\n\n/**\n* @title not_equal\n* @name not_equal\n* @summary Check if given value is not equal to the other.\n*\n*\n* @param {number} value The tested value.\n* @param {number} other The other value to be tested against.\n* @return {boolean} True if the value is between lower and upper, else false.\n*\n* @implem js\n*\n* @example not_equal(value, other)\n* @example <caption>Example usage of not_equal function.</caption>\n* // returns False\n* not_equal(2,1)\n*/\n\nexport default function not_equal (value, other) {\n  return !equal(value, other)\n}\n"}},funcs.not_equal.body=not_equal,funcs.not={type:"function",name:"not",description:"If `value` is `true` then return `false`, and if `false` then return\n `true`. The exclamation operator `!` is an alias for `not` e.g. `!(x>0)` is equivalent to `not(x>0)`.",title:"Not",summary:"Logically invert an expression. (Logical negation)",methods:{"not(value: boolean): boolean":{signature:"not(value: boolean): boolean",params:[{name:"value",type:"boolean",description:"The value to be negated."}],return:{type:"boolean",description:"The logical inverse."},examples:[{usage:"not(x > 4)"},{usage:"// returns False\n not(True)",caption:"Example usage of not function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_boolean from './is_boolean'\n\n/**\n* @title Not\n* @summary Logically invert an expression. (Logical negation)\n*\n* @description\n*\n* If `value` is `true` then return `false`, and if `false` then return\n* `true`. The exclamation operator `!` is an alias for `not` e.g. `!(x>0)` is equivalent to `not(x>0)`.\n*\n* @param {boolean} value The value to be negated.\n* @return {boolean} The logical inverse.\n*\n* @implem js\n* @author Nokome Bentley\n* @example not(x > 4)\n* @example <caption>Example usage of not function.</caption>\n* // returns False\n* not(True)\n*\n*/\n\nexport default function not (value) {\n  assert(is_boolean(value), 'parameter `value` must be a boolean')\n  return !value\n}\n"}},funcs.not.body=not,funcs.or={type:"function",name:"or",description:"Logical OR. Returns true if either or both values are true, else returns false.",title:"or",summary:"Logical OR.",methods:{"or(value: boolean, other: boolean): boolean":{signature:"or(value: boolean, other: boolean): boolean",params:[{name:"value",type:"boolean",description:"The first boolean value."},{name:"other",type:"boolean",description:"The second boolean value."}],return:{type:"boolean",description:"True if at least one of the values is true, else false."},examples:[{usage:"or(value, other)"},{usage:"// returns True\n or(true, false)",caption:"Example usage of or function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_boolean from './is_boolean'\n\n/**\n* @title or\n* @name or\n* @summary Logical OR.\n*\n* @description\n*\n* Logical OR. Returns true if either or both values are true, else returns false.\n*\n* @param {boolean} value The first boolean value.\n* @param {boolean} other The second boolean value.\n* @return {boolean} True if at least one of the values is true, else false.\n*\n* @implem js\n*\n* @example or(value, other)\n* @example <caption>Example usage of or function.</caption>\n* // returns True\n* or(true, false)\n*\n*/\n\nexport default function or (value, other) {\n  assert(is_boolean(value), 'parameter `value` must be a boolean')\n  assert(is_boolean(other), 'parameter `other` must be a boolean')\n  return value || other\n}\n"}},funcs.or.body=or,funcs.plot={type:"function",name:"plot",description:"Creates a plot or a table of plots.",title:"plot",summary:"Create a plot.",methods:{"plot(arg1: array|table, arg2: array|table)":{signature:"plot(arg1: array|table, arg2: array|table)",params:[{name:"arg1",type:"array|table",description:"The table or array of values to be plotted."},{name:"arg2",type:"array|table",description:"The nest table or array to be plotted. You can pass as many arguments as you want."}],examples:[{usage:"// returns plot\n // const z = [0, -2, 1, -5, -4, -3, -6, -7, -9, -8]\n plot(z)",caption:"Example usage of plot function."}]}},source:{type:"text",lang:"js",data:"import { merge } from 'lodash'\n\nimport is_array from './is_array'\nimport is_table from './is_table'\nimport length from './length'\nimport sequence from './sequence'\nimport table from './table'\nimport title_case from './title_case'\n\n/**\n* @title plot\n* @name plot\n* @summary Create a plot.\n*\n* @description Creates a plot or a table of plots.\n*\n* @param {array|table} arg1 The table or array of values to be plotted.\n* @param {array|table} arg2 The nest table or array to be plotted. You can pass as many arguments as you want.\n* @returns {plot} A new plot.\n*\n* @implem js\n* @example <caption>Example usage of plot function.</caption>\n* // returns plot\n* // const z = [0, -2, 1, -5, -4, -3, -6, -7, -9, -8]\n* plot(z)\n*\n* @author Nokome Bentley\n*\n*/\n\nexport default function plot (arg1, arg2, ...args) {\n  if (is_table(arg1)) return _plot_table(arg1, arg2, ...args)\n  else if (is_array(arg1)) {\n    if (is_array(arg2)) return _plot_array_array(arg1, arg2, ...args)\n    else return _plot_array(arg1, arg2, ...args)\n  } else throw new Error('Must be called with a table as the first argument or two arrays as the first two arguments')\n}\n\nfunction _plot_array (y, ...args) {\n  return _plot_table(table({\n    x: sequence(1, length(y)),\n    y: y\n  }), ...args)\n}\n\nfunction _plot_array_array (x, y, ...args) {\n  return _plot_table(table({\n    x: x,\n    y: y\n  }), ...args)\n}\n\nfunction _plot_table (table, x, y, options = {}) {\n  const columns = Object.keys(table.data)\n\n  if (!x) {\n    if (columns.indexOf('x') > -1) x = 'x'\n    else x = columns[0]\n  }\n\n  if (!y) {\n    if (columns.indexOf('y') > -1) y = 'y'\n    else y = columns[1]\n  }\n\n  let opacity = 0.5\n\n  let size = 10\n\n  let trace = {\n    type: 'scatter',\n    mode: 'markers',\n    x: table.data[x],\n    y: table.data[y],\n    marker: {\n      opacity: opacity,\n      size: size,\n      sizemode: 'area'\n    }\n  }\n\n  let layout = options\n\n  layout.xaxis = layout.xaxis || {}\n  layout.xaxis.title = layout.xaxis.title || title_case(x)\n\n  layout.yaxis = layout.yaxis || {}\n  layout.yaxis.title = layout.yaxis.title || title_case(y)\n\n  // Layout settings that are currently not optional\n\n  const axisSettings = {\n    linecolor: 'black',\n    linewidth: 1,\n    mirror: true, // By apply to both x and y, creates a bounding box\n    ticks: 'outside',\n    showspikes: false // Don't show \"spikes\"\n  }\n  merge(layout.xaxis, axisSettings)\n  merge(layout.yaxis, axisSettings)\n\n  layout.margin = {\n    l: 50,\n    r: 50,\n    t: 40,\n    b: 50\n  }\n\n  return {\n    type: 'plotly',\n    traces: [trace],\n    layout: layout\n  }\n}\n"}},funcs.plot.body=plot,funcs.plotly={type:"function",name:"plotly",description:"This is an adapter for using plotly.\nIt is merely bringing the input data into an appropriate\nformat and returns an object that is rendered by the PlotlyValueComponent.",methods:{"plotly()":{signature:"plotly()"}},source:{type:"text",lang:"js",data:"import { merge } from 'lodash'\n\nimport is_array from './is_array'\n\n/*\n  This is an adapter for using plotly.\n\n  It is merely bringing the input data into an appropriate\n  format and returns an object that is rendered by the PlotlyValueComponent.\n*/\nexport default function plotly (traces, layout) {\n  // TODO: make it convenient to use this function using transclusions\n\n  // allowing for a single trace\n  if (!is_array(traces)) traces = [traces]\n  layout = layout || {}\n\n  layout.xaxis = layout.xaxis || {}\n  layout.yaxis = layout.yaxis || {}\n  const axisSettings = {\n    linecolor: 'black',\n    linewidth: 1,\n    mirror: true, // By apply to both x and y, creates a bounding box\n    ticks: 'outside',\n    showspikes: false // Don't show \"spikes\"\n  }\n  merge(layout.xaxis, axisSettings)\n  merge(layout.yaxis, axisSettings)\n\n  layout.margin = {\n    l: 50,\n    r: 50,\n    t: 40,\n    b: 50\n  }\n\n  return {\n    type: 'plotly',\n    traces,\n    layout\n  }\n}\n"}},funcs.plotly.body=plotly,funcs.positive={type:"function",name:"positive",description:"This function does nothing but is provided for completeness as the antonym of\n the `negative` function and to support the plus operator `* `. The `* ` operator\n is an alias for `positive` e.g. `* x` is equivalent to `positive(x)`, which is equivalent to `x`.",title:"positive",summary:"Completeness as the antonym of the `negative` function.",methods:{"positive(value: number): number":{signature:"positive(value: number): number",params:[{name:"value",type:"number",description:"The tested value"}],return:{type:"number"},examples:[{usage:"positive(value)"},{usage:"// returns +2\n positive(2)",caption:"Example usage of positive function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_number from './is_number'\n\n/**\n* @title positive\n* @name positive\n* @summary Completeness as the antonym of the `negative` function.\n*\n* @description\n*\n* This function does nothing but is provided for completeness as the antonym of\n* the `negative` function and to support the plus operator `* `. The `* ` operator\n* is an alias for `positive` e.g. `* x` is equivalent to `positive(x)`, which is equivalent to `x`.\n*\n* @param {number} value The tested value\n* @return {number}\n*\n* @related negative\n* @implem js\n* @author Nokome Bentley\n*\n* @example positive(value)\n* @example <caption>Example usage of positive function.</caption>\n* // returns +2\n* positive(2)\n*\n*/\n\nexport default function positive (value) {\n  assert(is_number(value), 'parameter `value` must be a number')\n  return value\n}\n"}},funcs.positive.body=positive,funcs.pow={type:"function",name:"pow",description:"Returns the value raised to the power. The caret character, `^`, is used as\n an alias for `pow` e.g. `x ^ y` is equivalent to `pow(x, y)`.",title:"Power",summary:"Raise the value to the given power.",methods:{"pow(value: number, exponent: number): boolean":{signature:"pow(value: number, exponent: number): boolean",params:[{name:"value",type:"number",description:"Base value to be raised."},{name:"exponent",type:"number",description:"Exponent."}],return:{type:"boolean",description:"Value raised to the power of the exponent"},examples:[{usage:"power(value, exponent)"},{usage:"// returns 4\n power(2,2)",caption:"Example usage of power function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_number from './is_number'\n\n/**\n* @title Power\n* @summary Raise the value to the given power.\n*\n* @description\n*\n* Returns the value raised to the power. The caret character, `^`, is used as\n* an alias for `pow` e.g. `x ^ y` is equivalent to `pow(x, y)`.\n*\n* @param {number} value Base value to be raised.\n* @param {number} exponent Exponent.\n* @return {boolean} Value raised to the power of the exponent\n* @implem js\n*\n* @author Nokome Bentley\n*\n* @example power(value, exponent)\n* @example <caption>Example usage of power function.</caption>\n* // returns 4\n* power(2,2)\n*\n*/\n\nexport default function pow (value, exponent) {\n  assert(is_number(value), 'parameter `value` must be a number')\n  assert(is_number(exponent), 'parameter `exponent` must be a number')\n  return Math.pow(value, exponent)\n}\n"}},funcs.pow.body=pow,funcs.prepend={type:"function",name:"prepend",description:"Prepends the element to the array and returns the new array, with the prepended item.",title:"prepend",summary:"Prepends an element to the array.",methods:{"prepend(value: array, other: any): array":{signature:"prepend(value: array, other: any): array",params:[{name:"value",type:"array",description:"The array."},{name:"other",type:"any",description:"The element to be prepended."}],return:{type:"array",description:"The array with prepended element."},examples:[{usage:"prepend(array, element)"},{usage:'// returns ["hello", 1, 3, 6]\n prepend([1, 3, 6], "hello")',caption:"Example usage of prepend function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport clone from './clone'\nimport is_array from './is_array'\n\n/**\n* @title prepend\n* @summary Prepends an element to the array.\n*\n* @description\n*\n* Prepends the element to the array and returns the new array, with the prepended item.\n*\n* @param {array} value The array.\n* @param {any} other The element to be prepended.\n* @return {array} The array with prepended element.\n*\n* @implem js\n*\n* @example prepend(array, element)\n* @example <caption>Example usage of prepend function.</caption>\n* // returns [\"hello\", 1, 3, 6]\n* prepend([1, 3, 6], \"hello\")\n*\n* @author Nokome Bentley\n*\n*/\n\nexport default function prepend (value, other) {\n  assert(is_array(value), 'parameter `value` must be an array')\n  let result = clone(value)\n  if (is_array(other)) result.unshift(...other)\n  else result.unshift(other)\n  return result\n}\n"}},funcs.prepend.body=prepend,funcs.remainder={type:"function",name:"remainder",description:"Returns the remainder left over when a number is divided by a second number.\n The percent sign, `%`, is used as an alias for `remainder` e.g. `x % y` is equivalent\n to `remainder(x, y)`.",title:"reminder",summary:"Reminder of division.",methods:{"remainder(value: number, divisor: number): number":{signature:"remainder(value: number, divisor: number): number",params:[{name:"value",type:"number",description:"The number to be divided."},{name:"divisor",type:"number",description:"The number to divide by (divisor)."}],return:{type:"number",description:"The reminder."},examples:[{usage:"reminder(value, divisor)"},{usage:"returns 1\n reminder(5,2)",caption:"Example usage of reminder function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_number from './is_number'\n\n/**\n* @name remainder\n* @title reminder\n* @summary Reminder of division.\n*\n* @description\n*\n* Returns the remainder left over when a number is divided by a second number.\n* The percent sign, `%`, is used as an alias for `remainder` e.g. `x % y` is equivalent\n* to `remainder(x, y)`.\n*\n* @param {number} value The number to be divided.\n* @param {number} divisor The number to divide by (divisor).\n* @return {number} The reminder.\n*\n* @implem js\n* @author Nokome Bentley\n*\n* @example reminder(value, divisor)\n* @example <caption>Example usage of reminder function.</caption>\n* returns 1\n* reminder(5,2)\n*\n*/\n\nexport default function remainder (value, divisor) {\n  assert(is_number(value), 'parameter `value` must be a number')\n  assert(is_number(divisor), 'parameter `divisor` must be a number')\n  return value % divisor\n}\n"}},funcs.remainder.body=remainder,funcs.select={type:"function",name:"select",description:"A general purpose function for selecting members of a compound value (e.g. array, object or table). When the `members` parameter\n is an atomic value (e.g. an integer or a string) then a single member is returned. For example, `select(array, 2)`\n returns the second member of an array. When `members` is an array, then one or more members are returned. One-based indexing is used.\n\n The dot operator `.` is an alias for `select` with a single string e.g `table.column1` is equivalent to `select(table, 'column1')`.\n\n The square brackets operator `[]` is an alias for `select` for other member selectors e.g `table[['column1', 'column2']]` is equivalent to\n `select(table, ['column1', 'column2'])`.",title:"Select",summary:"Select one or more members of a value",methods:{"select(value: array|object|table, items: any): any":{signature:"select(value: array|object|table, items: any): any",params:[{name:"value",type:"array|object|table",description:"The value to select values from."},{name:"items",type:"any",description:"The items to select from the value."}],return:{type:"any",description:"The items of the value"},examples:[{usage:"select(value, items)"},{usage:"",caption:"Example usage of select function."},{usage:"select([2,1,5], 1)"},{usage:"returns 2\n // returns   [1, 2, 3]\n select({a: [1, 2, 3], b: ['1', '2', '3']}, 'a')"}]}},source:{type:"text",lang:"js",data:"import array from './array'\nimport assert from './assert'\nimport is_array from './is_array'\nimport is_integer from './is_integer'\nimport is_object from './is_object'\nimport is_string from './is_string'\nimport is_table from './is_table'\nimport length from './length'\n\n/**\n* @title select\n* @title Select\n* @summary  Select one or more members of a value\n*\n* @description\n*\n* A general purpose function for selecting members of a compound value (e.g. array, object or table). When the `members` parameter\n* is an atomic value (e.g. an integer or a string) then a single member is returned. For example, `select(array, 2)`\n* returns the second member of an array. When `members` is an array, then one or more members are returned. One-based indexing is used.\n*\n* The dot operator `.` is an alias for `select` with a single string e.g `table.column1` is equivalent to `select(table, 'column1')`.\n*\n* The square brackets operator `[]` is an alias for `select` for other member selectors e.g `table[['column1', 'column2']]` is equivalent to\n* `select(table, ['column1', 'column2'])`.\n*\n* @param {array|object|table} value The value to select values from.\n* @param {any} items The items to select from the value.\n* @return  {any} The items of the value\n*\n* @implem js\n*\n* @author Nokome Bentley\n*\n* @example select(value, items)\n* @example <caption>Example usage of select function.</caption>\n* @example select([2,1,5], 1)\n* @example returns 2\n* // returns   [1, 2, 3]\n* select({a: [1, 2, 3], b: ['1', '2', '3']}, 'a')\n*\n*/\n\nexport default function select (value, items) {\n  if (is_array(value)) return _select_array(value, items)\n  else if (is_table(value)) return _select_table(value, items)\n  else if (is_object(value)) return _select_object(value, items)\n  else throw new Error('parameter `value` must be an array, an object, or a table')\n}\n\nfunction _select_array (value, items) {\n  if (is_integer(items)) {\n    if (items < 1) throw new Error('array index must be greater than or equal to 1')\n    if (items > length(value)) throw new Error('array index must be less than or equal to length of array')\n    return value[items - 1]\n  } else {\n    let indices = array(items)\n    assert(is_array(indices, 'integer'), 'parameter `items` should be an integer or an array of integers')\n    return indices.map((index) => {\n      return _select_array(value, index)\n    })\n  }\n}\n\nfunction _select_object (value, items) {\n  if (is_string(items)) {\n    const property = value[items]\n    if (property === undefined) throw new Error(`object does not have a property named \"${items}\"`)\n    return property\n  } else {\n    let names = array(items)\n    assert(is_array(names, 'string'), 'parameter `items` should be an array of strings')\n\n    let selected = {}\n    names.forEach(name => {\n      selected[name] = value[name]\n    })\n    return selected\n  }\n}\n\nfunction _select_table (value, items) {\n  if (is_string(items)) {\n    const column = value.data[items]\n    if (column === undefined) throw new Error(`table does not have a column named \"${items}\"`)\n    return column\n  } else if (is_integer(items)) {\n    const names = Object.keys(value.data)\n    if (items < 1) throw new Error('column index must be greater than or equal to 1')\n    if (items > length(names)) throw new Error('column index must be less than or equal to number of columns')\n    const column = value.data[names[items - 1]]\n    return column\n  } else if (is_array(items)) {\n    let selected = {\n      type: 'table',\n      data: {},\n      rows: value.rows\n    }\n    items.forEach(item => {\n      selected.data[item] = _select_table(value, item)\n    })\n    selected.columns = Object.keys(selected.data).length\n    return selected\n  }\n}\n"}},funcs.select.body=select,funcs.sequence={type:"function",name:"sequence",description:'Creates a range (from "lodash" library). As per the lodash documentation:\n "Creates an array of numbers (positive and/or negative) progressing from start up to the end. A step of -1 is used if a negative start is specified without an end or step. If end is not specified, it\'s set to start with start then set to 0."',title:"sequence",summary:"Creates a range to step through.",methods:{"sequence(begin: number, end: number, step: number)":{signature:"sequence(begin: number, end: number, step: number)",params:[{name:"begin",type:"number",description:"The beginning of the range."},{name:"end",type:"number",description:"The end of the range."},{name:"step",type:"number",description:"The value to increment or decrement by. The default value = 1."}]}},source:{type:"text",lang:"js",data:"import { range } from 'lodash'\n\nimport assert from './assert'\nimport is_number from './is_number'\n\n/**\n* @title sequence\n* @name sequence\n* @summary Creates a range to step through.\n*\n* @description Creates a range (from \"lodash\" library). As per the lodash documentation:\n* \"Creates an array of numbers (positive and/or negative) progressing from start up to the end. A step of -1 is used if a negative start is specified without an end or step. If end is not specified, it's set to start with start then set to 0.\"\n*\n* @param {number} begin The beginning of the range.\n* @param {number} end The end of the range.\n* @param {number} step The value to increment or decrement by. The default value = 1.\n* @returns {array[number]} An array of numbers.\n*\n* @implem js\n*\n* @example <caption>Example usage of sequence function.</caption>\n* // returns [2, 4, 6, 8, 10]\n* sequence(2, 10, 2)\n*\n* @author Nokome Bentley\n*/\n\nexport default function sequence (begin, end, step = 1) {\n  assert(is_number(begin), 'parameter `begin` must be a number')\n  assert(is_number(end), 'parameter `end` must be a number')\n  assert(is_number(step), 'parameter `step` must be a number')\n\n  // lodash range goes \"up to, but not including, end\", so we\n  // add step to end because we want to include end\n  return range(begin, end + step, step)\n}\n"}},funcs.sequence.body=sequence,funcs.sleep={type:"function",name:"sleep",description:"Delay execution for a specified time interval (in seconds).\n In JavaScript this function is implemented in blocking, CPU-hogging way.",title:"sleep",summary:"Delay execution for a specified time interval (in seconds).",methods:{"sleep(seconds: number): number":{signature:"sleep(seconds: number): number",params:[{name:"seconds",type:"number",description:"Duration of delay"}],return:{type:"number",description:"Duration of delay"},examples:[{usage:"sleep(seconds)"},{usage:"// returns 20\n sleep(20)",caption:"Example usage of sleep function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_number from './is_number'\n\n/**\n* @title sleep\n* @name sleep\n* @summary Delay execution for a specified time interval (in seconds).\n*\n* @description\n*\n* Delay execution for a specified time interval (in seconds).\n* In JavaScript this function is implemented in blocking, CPU-hogging way.\n*\n* @param {number}  seconds Duration of delay\n* @return {number} Duration of delay\n*\n* @implem js\n*\n* @example sleep(seconds)\n* @example <caption>Example usage of sleep function.</caption>\n* // returns 20\n* sleep(20)\n*\n* @author Nokome Bentley\n*\n*/\n\nexport default function sleep (seconds) {\n  assert(is_number(seconds), 'parameter `seconds` must be a number')\n\n  const start = new Date().getTime()\n  while (new Date().getTime() < start + seconds * 1000);\n\n  return seconds\n}\n"}},funcs.sleep.body=sleep,funcs.snake_case={type:"function",name:"snake_case",description:'Concatenates words and phrases, changing all upper case to lower case and connecting them with underscore "_". No spaces or other punctuation is used.',title:"snake_case",summary:'Concatenates words and phrases, changing all upper case to lower case and connecting them with underscore "_"',methods:{"snake_case(value: string): string":{signature:"snake_case(value: string): string",params:[{name:"value",type:"string",description:"The string to be concatenated to Snake Case."}],return:{type:"string",description:"Returns the value concatenated to Snake Case."},examples:[{usage:'// returns snake_case\n kebab_case("Snake, Case")',caption:"Example usage of snake_case function."}]}},source:{type:"text",lang:"js",data:"import { snakeCase } from 'lodash'\n\nimport assert from './assert'\nimport is_string from './is_string'\n\n/**\n* @title snake_case\n* @name snake_case\n* @summary Concatenates words and phrases, changing all upper case to lower case and connecting them with underscore \"_\"\n*\n* @description Concatenates words and phrases, changing all upper case to lower case and connecting them with underscore \"_\". No spaces or other punctuation is used.\n*\n* @param {string} value The string to be concatenated to Snake Case.\n* @return {string} Returns the value concatenated to Snake Case.\n*\n* @implem js\n*\n*\n* @example <caption>Example usage of snake_case function.</caption>\n*\n* // returns snake_case\n* kebab_case(\"Snake, Case\")\n*\n*/\n\nexport default function snake_case (value) {\n  assert(is_string(value), 'parameter `value` must be a string')\n\n  return snakeCase(value)\n}\n"}},funcs.snake_case.body=snake_case,funcs.subtract={type:"function",name:"subtract",description:"Returns the subtraction of two values. The minus sign, `-`, is used as an alias for `subtract` e.g. `x - y` is equivalent to `subtract(x, y)`.",title:"subtract",summary:"Subtraction of two values.",methods:{"subtract(value: number, other: number): number":{signature:"subtract(value: number, other: number): number",params:[{name:"value",type:"number",description:"The number."},{name:"other",type:"number",description:"The other number."}],return:{type:"number",description:"Result of subtraction."},examples:[{usage:"subtract(value, other)"},{usage:"// returns 5\n subtract(10,5)",caption:"Example usage of subtract function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_number from './is_number'\n\n/**\n* @title subtract\n* @name subtract\n* @summary  Subtraction of two values.\n*\n* @description\n*\n* Returns the subtraction of two values. The minus sign, `-`, is used as an alias for `subtract` e.g. `x - y` is equivalent to `subtract(x, y)`.\n*\n* @param {number} value The number.\n* @param {number} other The other number.\n* @return {number} Result of subtraction.\n*\n* @implem js\n*\n* @example subtract(value, other)\n* @example <caption>Example usage of subtract function.</caption>\n* // returns 5\n* subtract(10,5)\n*\n* @author Nokome Bentley\n*\n*/\n\nexport default function subtract (value, other) {\n  assert(is_number(value), 'parameter `value` must be a number')\n  assert(is_number(other), 'parameter `other` must be a number')\n  return value - other\n}\n"}},funcs.subtract.body=subtract,funcs.sum={type:"function",name:"sum",description:"Sum of numbers.",summary:"Sum of numbers",methods:{"sum(values: any): number":{signature:"sum(values: any): number",params:[{name:"values",type:"any",repeats:!0,description:"Numbers to sum."}],return:{type:"number",description:"The sum of the numbers."},examples:[{usage:"// returns 6\n sum([1, 2, 3])"},{usage:"// returns 6\n sum(1, 2, 3)"}]}},source:{type:"text",lang:"js",data:"import is_number from './is_number'\n\nimport _reduce from './_reduce'\n\n/**\n* @summary Sum of numbers\n*\n* @description\n*\n* Sum of numbers.\n*\n* @param {...any} values Numbers to sum.\n* @return {number} The sum of the numbers.\n*\n* @example\n* // returns 6\n* sum([1, 2, 3])\n*\n* @example\n* // returns 6\n* sum(1, 2, 3)\n*/\nexport default function sum (...values) {\n  return _reduce(0, (accumulator, value) => accumulator + value, is_number, ...values)\n}\n"}},funcs.sum.body=sum,funcs.t_test={type:"function",name:"t_test",description:"",title:"Student's t-Test",summary:"One-sample and paired Student's t-Test on arrays of numbers.",methods:{"t_test()":{signature:"t_test()"}},source:{type:"text",lang:"js",data:"import stdlib from '@stdlib/stdlib'\n\nimport mean from './mean'\n\n/**\n* @title Student's t-Test\n* @summary One-sample and paired Student's t-Test on arrays of numbers.\n*\n*\n* @param {array[number]} x The value to be checked.\n* @param {array[number]} y\n* @param {number} mu The hypothesized true mean under the null hypothesis. Default value = 0.\n* @param {number} tails Whether the alternative hypothesis is that the mean of x (or difference between x and y) is larger than mu (1, i.e. \"one-sided greater than\"), smaller than mu (-1, i.e. \"one-sided less than\") or equal to mu (0, i.e. \"two-sided\").\n* @param {boolean} paired Perform a paired t-test?. Default value is 'false'.\n* @param {number} alpha Number in the interval [0,1] giving the significance level of the hypothesis test. Default value is 0.5\n* @returns {object} An object of type \"ttest\"\n*\n* @implem js\n* @implem r\n* @example <caption>Example usage of t_test function.</caption>\n* // returns 0\n* // const x = [0,1,2,3,4,5,6,7,8,9]\n* // const y = [9,8,7,6,5,4,3,2,1,0]\n* t_test(x, y)\n*\n*/\n\nexport default function t_test (x, y, mu, tails, paired, alpha) {\n  const implem = stdlib.stats.ttest\n  const options = {\n    mu: mu || 0,\n    alternative: ['less', 'two-sided', 'greater'][(tails || 0) + 1],\n    alpha: alpha || 0.05\n  }\n  let result\n  if (paired) result = implem(x, y, options)\n  else {\n    if (y) result = implem(x, Object.assign(options, { mu: mean(y) + options.mu }))\n    else result = implem(x, options)\n  }\n  return {\n    type: 't_test',\n    mean: result.mean,\n    sd: result.sd,\n    statistic: result.statistic,\n    ci: result.ci,\n    df: result.df,\n    p_value: result.pValue,\n    rejected: result.rejected\n  }\n}\n"}},funcs.t_test.body=t_test,funcs.table={type:"function",name:"table",description:"Creates a table from either an object of arrays, or an array of objects.",title:"table",summary:"Create a table value",methods:{"table(value: any): table":{signature:"table(value: any): table",params:[{name:"value",type:"any",description:"Either an object of arrays, or an array of objects"}],return:{type:"table",description:"A new value of type 'table'"},examples:[{usage:"table(x, upper, lower)"},{usage:"// returns {type: 'table', data: {a: [1, 2, 3], b: ['1', '2', '3']}, columns: 2, rows: 3}\n table({ a: 1, b: '1' },{ a: 2, b: '2' },{ a: 3, b: '3' })",caption:"Example usage of table function."}]}},source:{type:"text",lang:"js",data:"import assert from './assert'\nimport is_array from './is_array'\nimport is_object from './is_object'\nimport is_table from './is_table'\n\n/**\n* @title table\n* @name table\n* @summary Create a table value\n*\n* @description\n*\n* Creates a table from either an object of arrays, or an array of objects.\n*\n* @param {any} value Either an object of arrays, or an array of objects\n* @return {table} A new value of type 'table'\n*\n* @implem js\n*\n* @example table(x, upper, lower)\n* @example <caption>Example usage of table function.</caption>\n* // returns {type: 'table', data: {a: [1, 2, 3], b: ['1', '2', '3']}, columns: 2, rows: 3}\n* table({ a: 1, b: '1' },{ a: 2, b: '2' },{ a: 3, b: '3' })\n*/\n\nexport default function table (value) {\n  if (is_table(value)) return value\n  else if (is_array(value, 'object')) return _table_array_object(value)\n  else if (is_object(value)) return _table_object(value)\n  else throw new Error('parameter `value` must be an array of objects or an object of arrays')\n}\n\nfunction _table_array_object (array) {\n  let data = {}\n  let rows = array.length\n  let fields = Object.keys(array[0])\n  let columns = fields.length\n\n  for (let field of fields) {\n    data[field] = []\n  }\n  for (let row of array) {\n    for (let field of fields) {\n      data[field].push(row[field])\n    }\n  }\n\n  return {\n    type: 'table',\n    data: data,\n    columns: columns,\n    rows: rows\n  }\n}\n\nfunction _table_object (object) {\n  let names = Object.keys(object)\n  let columns = names.length\n  let rows = null\n  for (let name of names) {\n    let column = object[name]\n    assert(is_array(column), `object property '${name}' is not an array`)\n    if (rows === null) rows = column.length\n    else assert(column.length === rows, `object property '${name}' has length '${column.length}' which is different to length '${rows}' of first property '${names[0]}'`)\n  }\n\n  return {\n    type: 'table',\n    data: object,\n    columns: columns,\n    rows: rows\n  }\n}\n"}},funcs.table.body=table,funcs.title_case={type:"function",name:"title_case",description:"",title:"title_case",summary:"Changes all words in the string to start with upper case.",methods:{"title_case(value: string): string":{signature:"title_case(value: string): string",params:[{name:"value",type:"string",description:"The string to have all words changed start with upper case."}],return:{type:"string",description:"Returns the string with all words starting with upper case."},examples:[{usage:'// returns Title Case\n title_case("title case")',caption:"Example usage of title_case function."}]}},source:{type:"text",lang:"js",data:"import { startCase } from 'lodash'\n\nimport assert from './assert'\nimport is_string from './is_string'\n\n/**\n* @title title_case\n* @name title_case\n* @summary Changes all words in the string to start with upper case.\n*\n*\n* @param {string} value The string to have all words changed start with upper case.\n* @return {string} Returns the string with all words starting with upper case.\n*\n* @implem js\n*\n* @example <caption>Example usage of title_case function.</caption>\n*\n* // returns Title Case\n* title_case(\"title case\")\n*\n*/\n\nexport default function title_case (value) {\n  assert(is_string(value), 'parameter `value` must be a string')\n\n  return startCase(value)\n}\n"}},funcs.title_case.body=title_case,funcs.type={type:"function",name:"type",description:'A base function that returns the type name e.g. "number" of a value.',title:"type",summary:"Get the type name of a value.",methods:{"type(value: any)":{signature:"type(value: any)",params:[{name:"value",type:"any",description:"The value for which the type is wanted."}],examples:[{usage:'// returns "integer"\n type(42)',caption:"Example usage of type function. Get the type of an integer literal."},{usage:'// returns "array[string]"\n type(A1:A10)\n\n* @example <caption>Example usage of type function. Get the type of a two-dimensional array of Sheet cells.</caption>\n // returns "matrix[number]"\n type(A1:D5)',caption:"Example usage of type function. Get the type of a one-dimensional array of Sheet cells."}]}},source:{type:"text",lang:"js",data:"/**\n* @title type\n* @name type\n* @summary Get the type name of a value.\n*\n* @description A base function that returns the type name e.g. \"number\" of a value.\n*\n* @param {any} value The value for which the type is wanted.\n* @returns {string} True if the value is of type boolean, else false.\n*\n* @implem js\n* @example <caption>Example usage of type function. Get the type of an integer literal. </caption>\n* // returns \"integer\"\n* type(42)\n*\n* @example <caption>Example usage of type function. Get the type of a one-dimensional array of Sheet cells. </caption>\n* // returns \"array[string]\"\n* type(A1:A10)\n*\n** @example <caption>Example usage of type function. Get the type of a two-dimensional array of Sheet cells.</caption>\n* // returns \"matrix[number]\"\n* type(A1:D5)\n*/\n\nexport default function type (value) {\n  let type = typeof value\n\n  if (value === null) {\n    return 'null'\n  } else if (type === 'boolean') {\n    return 'boolean'\n  } else if (type === 'number') {\n    let isInteger = false\n    if (value.isInteger) isInteger = value.isInteger()\n    else isInteger = (value % 1) === 0\n    return isInteger ? 'integer' : 'number'\n  } else if (type === 'string') {\n    return 'string'\n  } else if (type === 'object') {\n    if (value.constructor === Array) return 'array'\n    else {\n      if (value.type) return value.type\n      else return 'object'\n    }\n  } else {\n    return 'unknown'\n  }\n}\n"}},funcs.type.body=type,funcs.upper_case={type:"function",name:"upper_case",description:"",title:"upper_case",summary:"Changes all lower case to upper case in the string.",methods:{"upper_case(value: string): string":{signature:"upper_case(value: string): string",params:[{name:"value",type:"string",description:"The string to have lower case changed to upper case."}],return:{type:"string",description:"Returns the string with all upper case letters."},examples:[{usage:'// returns UPPER CASE\n upper_case("upper case")',caption:"Example usage of upper_case function."}]}},source:{type:"text",lang:"js",data:"import { upperCase } from 'lodash'\n\nimport assert from './assert'\nimport is_string from './is_string'\n\n/**\n* @title upper_case\n* @name upper_case\n* @summary Changes all lower case to upper case in the string.\n*\n*\n* @param {string} value The string to have lower case changed to upper case.\n* @return {string} Returns the string with all upper case letters.\n*\n* @implem js\n*\n* @example <caption>Example usage of upper_case function.</caption>\n*\n* // returns UPPER CASE\n* upper_case(\"upper case\")\n*\n*/\n\nexport default function upper_case (value) {\n  assert(is_string(value), 'parameter `value` must be a string')\n\n  return upperCase(value)\n}\n"}},funcs.upper_case.body=upper_case,exports.type=type$1,exports.name=name,exports.funcs=funcs,Object.defineProperty(exports,"__esModule",{value:!0})});
